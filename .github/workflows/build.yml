name: NPVRUS Build and Deploy

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - '.gitignore'
      - 'version.properties'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - '.gitignore'
      - 'version.properties'
  

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup SSH Agent
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa  # Handle potential Windows line endings
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v3

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew ${{ secrets.GRADLE_TASKS }}

  update_version:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update Build Version
        run: |
          VERSION=$(./gradlew properties | grep "version:" | awk '{print $2}')
          echo "Version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

  docker_build:
    runs-on: ubuntu-latest
    needs: update_version
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker build -t my-app:${{ env.VERSION }} -f ${{ secrets.APPLICATION_DOCKERFILE }} .

      - name: Push Docker Image
        run: |
          docker tag my-app:${{ env.VERSION }} my-dockerhub-user/my-app:${{ env.VERSION }}
          docker push my-dockerhub-user/my-app:${{ env.VERSION }}

  clean_docker:
    runs-on: ubuntu-latest
    if: always()
    needs: docker_build
    steps:
      - name: Clean Running Docker Containers
        run: |
          docker ps -q | xargs -r docker stop
          docker ps -aq | xargs
::contentReference[oaicite:34]{index=34}
 
